{
	"info": {
		"_postman_id": "74fee4bd-4794-4e1d-9ac4-d9f52debe792",
		"name": "demo_evershop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31546450"
	},
	"item": [
		{
			"name": "search_product(Nike react phantom run flyknit 2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer token');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('15506');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('text/html; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "token",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/search?keyword=Nike+react+phantom+run+flyknit+2",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"search"
					],
					"query": [
						{
							"key": "keyword",
							"value": "Nike+react+phantom+run+flyknit+2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Products to Cart ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer tokennew');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('1216');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('application/json; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "tokennew",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"sku\": \"NJC48508-Black-S\",\r\n \"qty\": \"1\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demo.evershop.io/api/cart/mine/items",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"api",
						"cart",
						"mine",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "cart check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer cart_check');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('17729');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('text/html; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "cart_check",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/cart",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "after_search_2nd_click_the_product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer token2');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('18980');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('text/html; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "token2",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/men/nike-react-phantom-run-flyknit-2-179",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"men",
						"nike-react-phantom-run-flyknit-2-179"
					]
				}
			},
			"response": []
		},
		{
			"name": "select_the_product_size",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer product_size');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('6941');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('application/json; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "product_size",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/men/nike-react-phantom-run-flyknit-2-179?color=14&size=25&ajax=true",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"men",
						"nike-react-phantom-run-flyknit-2-179"
					],
					"query": [
						{
							"key": "color",
							"value": "14"
						},
						{
							"key": "size",
							"value": "25"
						},
						{
							"key": "ajax",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "product_color",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//general\r",
							"pm.test(\"Verify Status code is 200\",  ()=> {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the Status response is OK\", ()=> {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms  \",  ()=> {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the request contains specific headers\r",
							"\r",
							"pm.test(\"Request has the correct headers\", ()=> {\r",
							"    // Retrieve the headers sent in the request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept-Encoding')).to.be.true;\r",
							"    pm.expect(headers.get('Accept-Encoding')).to.equal('gzip, deflate, br');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Accept' header exists and has the correct value\r",
							"    pm.expect(headers.has('Accept')).to.be.true;\r",
							"    pm.expect(headers.get('Accept')).to.equal('*/*');\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    // Check if the 'Host' header exists and has the correct value\r",
							"    pm.expect(headers.has('Host')).to.be.true;\r",
							"    pm.expect(headers.get('Host')).to.equal('demo.evershop.io');\r",
							"    \r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('User-Agent')).to.be.true;\r",
							"    pm.expect(headers.get('User-Agent')).to.equal('PostmanRuntime/7.42.0');  \r",
							"\r",
							"\r",
							"    // Check if the 'User-Agent' header exists\r",
							"    pm.expect(headers.has('Connection')).to.be.true;\r",
							"    pm.expect(headers.get('Connection')).to.equal('keep-alive'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test if a specific cookie exists\r",
							"pm.test(\"Check if session cookie is set\", ()=> {\r",
							"    var cookies = pm.cookies;\r",
							"    pm.expect(cookies.has('Cookie_1')).to.be.true;\r",
							" });\r",
							"\r",
							"// Test cookie value\r",
							"pm.test(\"Verify the session cookie value\",  ()=> {\r",
							"     //retrive the cookie\r",
							"     var cookie = pm.cookies.get('Cookie_1');\r",
							"     pm.expect(cookie).to.eql('cookie verify');\r",
							"\r",
							" });\r",
							"\r",
							"\r",
							"\r",
							"//Verify Authorization\r",
							"\r",
							"pm.test(\"Verify Authorization\", ()=> {\r",
							"    // Retrieve the headers request\r",
							"    const headers = pm.request.headers;\r",
							"\r",
							"    // Check if the 'Authorization' header exists and has the correct value\r",
							"    pm.expect(headers.has('Authorization')).to.be.true;\r",
							"    pm.expect(headers.get('Authorization')).to.equal('Bearer product_color');  \r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Verify that the response contains specific headers\r",
							"\r",
							"pm.test(\"Response has the correct headers\", ()=> {\r",
							"    // Retrieve the headers response\r",
							"    const headers = pm.response.headers;\r",
							"\r",
							"    // Check if the 'Content-Length' header exists and has the correct value\r",
							"    pm.expect(headers.has('Content-Length')).to.be.true;\r",
							"    pm.expect(headers.get('Content-Length')).to.equal('6941');\r",
							"\r",
							"\r",
							"    // Check if the 'content-type' header exists and has the correct value\r",
							"    pm.expect(headers.has('content-type')).to.be.true;\r",
							"    pm.expect(headers.get('content-type')).to.equal('application/json; charset=utf-8');\r",
							" \r",
							"\r",
							"\r",
							"    // Check if the 'request-context' header exists\r",
							"    pm.expect(headers.has('request-context')).to.be.true;\r",
							"    pm.expect(headers.get('request-context')).to.equal('appId=cid-v1:');  \r",
							"\r",
							"\r",
							"    // Check if the 'x-powered-by' header exists\r",
							"    pm.expect(headers.has('x-powered-by')).to.be.true;\r",
							"    pm.expect(headers.get('x-powered-by')).to.equal('Express'); \r",
							"\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "product_color",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/men/nike-react-phantom-run-flyknit-2-179?color=14&size=25&ajax=true",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"men",
						"nike-react-phantom-run-flyknit-2-179"
					],
					"query": [
						{
							"key": "color",
							"value": "14"
						},
						{
							"key": "size",
							"value": "25"
						},
						{
							"key": "ajax",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "view_cart",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo.evershop.io/cart",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"cart"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_product_quantity",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"qty\": 1,\r\n \"action\": \"increase\"}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://demo.evershop.io/api/cart/6e0b66b6-efc2-42c2-88d1-9934894096f0/items/90d30cdf-6b34-4eab-b407-1e5bf8017b3e",
					"protocol": "https",
					"host": [
						"demo",
						"evershop",
						"io"
					],
					"path": [
						"api",
						"cart",
						"6e0b66b6-efc2-42c2-88d1-9934894096f0",
						"items",
						"90d30cdf-6b34-4eab-b407-1e5bf8017b3e"
					]
				}
			},
			"response": []
		}
	]
}